#!/usr/bin/env python3
# -- coding: utf-8 --
import sys
import subprocess
import pkg_resources
import os
import json
import re
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress
from rich.markdown import Markdown
from rich.style import Style

# Verificaci√≥n de dependencias
REQUIRED_PACKAGES = ["requests>=2.31.0", "openai>=1.0.0", "rich>=13.0.0"]

def verificar_dependencias():
    """Verifica si las dependencias est√°n instaladas y las instala si es necesario."""
    try:
        pkg_resources.require(REQUIRED_PACKAGES)
    except pkg_resources.DistributionNotFound as e:
        console.print(f"[bold red]‚ùå Dependencia faltante: {e}[/bold red]")
        console.print("[bold yellow]Instalando dependencias...[/bold yellow]")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        console.print("[bold green]‚úÖ Dependencias instaladas correctamente.[/bold green]")
    except pkg_resources.VersionConflict as e:
        console.print(f"[bold red]‚ùå Versi√≥n incorrecta de dependencia: {e}[/bold red]")
        console.print("[bold yellow]Actualizando dependencias...[/bold yellow]")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "-r", "requirements.txt"])
        console.print("[bold green]‚úÖ Dependencias actualizadas correctamente.[/bold green]")

# Verifica si el script se est√° ejecutando dentro de un entorno virtual
def verificar_entorno_virtual():
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        console.print("[bold yellow]‚ö° No se detect√≥ un entorno virtual. Creando y activando uno...[/bold yellow]")
        crear_entorno_virtual()
    else:
        console.print("[bold green]‚úÖ Entorno virtual ya activado.[/bold green]")

# Crear entorno virtual
def crear_entorno_virtual():
    venv_dir = "myenv"
    if not os.path.exists(venv_dir):
        subprocess.check_call([sys.executable, "-m", "venv", venv_dir])
        console.print(f"[bold green]‚úÖ Entorno virtual creado en: {venv_dir}[/bold green]")
    else:
        console.print(f"[bold yellow]‚ö° El entorno virtual ya existe: {venv_dir}[/bold yellow]")
    
    # Activar el entorno virtual
    activar_entorno_virtual(venv_dir)

# Activar entorno virtual
def activar_entorno_virtual(venv_dir):
    activate_script = os.path.join(venv_dir, "bin", "activate")
    if sys.platform == "win32":
        activate_script = os.path.join(venv_dir, "Scripts", "activate.bat")
    if os.path.exists(activate_script):
        subprocess.check_call([activate_script])
        console.print(f"[bold green]‚úÖ Entorno virtual activado.[/bold green]")
    else:
        console.print(f"[bold red]‚ùå No se pudo activar el entorno virtual.[/bold red]")

# Instalar las dependencias necesarias dentro del entorno virtual
def instalar_dependencias():
    subprocess.check_call([sys.executable, "-m", "pip", "install", "openai", "requests", "rich"])

# Configuraci√≥n Rich
console = Console()

BANNER = """
[bold cyan]
 __    __      _ _         __    __ _                  _ 
/ / /\ \ \_ __(_) |_ ___  / / /\ \ (_)______ _ _ __ __| |
\ \/  \/ / '__| | __/ _ \ \ \/  \/ / |_  / _` | '__/ _` |
 \  /\  /| |  | | ||  __/  \  /\  /| |/ / (_| | | | (_| |
  \/  \/ |_|  |_|\__\___|   \/  \/ |_/___\__,_|_|  \__,_|

---- By: MARH -------------------------------------------
"""
def generar_writeup(nombre_maquina, ip):
    """Genera un write-up profesional usando DeepSeek"""
    system_msg = f"""Eres un experto en CTFs y pentesting. Para {nombre_maquina} ({ip}), genera:
1. *Reconocimiento*: Comandos de escaneo (nmap, masscan)
2. *Enumeraci√≥n*: T√©cnicas espec√≠ficas por servicio
3. *Explotaci√≥n*: 3 m√©todos con payloads actualizados
4. *Post-Explotaci√≥n*: Comandos de pivoting
5. *Escalada*: 2 v√≠as de escalada (kernel/sudo)
6. *Hardening*: Recomendaciones de seguridad

Formato: Markdown con tabs de c√≥digo ejecutables"""

    with Progress() as progress:
        task = progress.add_task("[cyan]Generando write-up...", total=100)
        while not progress.finished:
            progress.update(task, advance=10)
            response = client.chat.completions.create(
                model="deepseek-reasoner",
                messages=[
                    {"role": "system", "content": system_msg},
                    {"role": "user", "content": f"Genera write-up para {nombre_maquina}"}
                ],
                temperature=0.3,
                max_tokens=3000
            )
            progress.update(task, completed=100)
    
    return response.choices[0].message.content

def main():
    # Verificar entorno virtual
    verificar_entorno_virtual()

    # Instalar dependencias si es necesario
    instalar_dependencias()

    # Continuar con el resto del c√≥digo
    maquina = console.input("\nüîß [bold]Nombre de la m√°quina: [/bold]").strip()
    ip = console.input("üåê [bold]Direcci√≥n IP: [/bold]").strip()
    
    while True:
        # Mostrar el men√∫ y ejecutar las opciones
        mostrar_menu()
        opcion = console.input("\n‚ö° [bold]Selecciona opci√≥n: [/bold]")
        
        if opcion == "1":
            console.print(f"\nüìú [bold]Generando write-up para {maquina}...[/bold]\n")
            writeup = generar_writeup(maquina, ip)
            console.print(Markdown(writeup))
        elif opcion == "2":
            puerto = console.input("üî¶ [bold]Puerto a analizar (ej: 445): [/bold]")
            console.print(f"\nüîé [bold]An√°lisis de {ip}:{puerto}:[/bold]\n")
            analisis = analizar_puerto(ip, puerto)
            console.print(Panel.fit(analisis, style="bold green"))
        elif opcion == "3":
            console.print(f"\nü§ñ [bold]Iniciando modo autom√°tico para {ip}...[/bold]\n")
            script = modo_automatico(ip)
            console.print(Panel.fit(script, style="bold yellow"))
        elif opcion == "4":
            writeup = generar_writeup(maquina, ip)
            exportar_writeup(writeup, maquina)
        elif opcion == "5":
            console.print("\nüßô‚Äç‚ôÇÔ∏è [bold cyan]¬°WriteWizard ha completado su magia! Saliendo...[/bold cyan]")
            break

if __name__ == "__main__":
    main()
