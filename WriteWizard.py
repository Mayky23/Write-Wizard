#!/usr/bin/env python3
# -- coding: utf-8 --
import sys
import subprocess
import pkg_resources
import requests
from openai import OpenAI
import json
import re
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress
from rich.markdown import Markdown
from rich.style import Style
import warnings

# Ignorar advertencias de deprecaci√≥n
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Verificaci√≥n de dependencias
REQUIRED_PACKAGES = ["requests>=2.31.0", "openai>=1.0.0", "rich>=13.0.0"]

def verificar_dependencias():
    """Verifica si las dependencias est√°n instaladas y las instala si es necesario."""
    try:
        pkg_resources.require(REQUIRED_PACKAGES)
    except pkg_resources.DistributionNotFound as e:
        console.print(f"[bold red]‚ùå Dependencia faltante: {e}[/bold red]")
        console.print("[bold yellow]Instalando dependencias...[/bold yellow]")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        console.print("[bold green]‚úÖ Dependencias instaladas correctamente.[/bold green]")
    except pkg_resources.VersionConflict as e:
        console.print(f"[bold red]‚ùå Versi√≥n incorrecta de dependencia: {e}[/bold red]")
        console.print("[bold yellow]Actualizando dependencias...[/bold yellow]")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "-r", "requirements.txt"])
        console.print("[bold green]‚úÖ Dependencias actualizadas correctamente.[/bold green]")

# Configuraci√≥n DeepSeek
DEEPSEEK_API_KEY = "TU_API_KEY_AQUI"  # üëâ Obt√©nla en: https://platform.deepseek.com/api_keys
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")

# Configuraci√≥n Rich
console = Console()

BANNER = r"""
[bold cyan]
 __    __      _ _         __    __ _                  _ 
/ / /\ \ \_ __(_) |_ ___  / / /\ \ (_)______ _ _ __ __| |
\ \/  \/ / '__| | __/ _ \ \ \/  \/ / |_  / _` | '__/ _` |
 \  /\  /| |  | | ||  __/  \  /\  /| |/ / (_| | | | (_| |
  \/  \/ |_|  |_|\__\___|   \/  \/ |_/___\__,_|_|  \__,_|

---- By: MARH -------------------------------------------
                                                         

[/bold cyan]
"""

def generar_writeup(nombre_maquina, ip):
    """Genera un write-up profesional usando DeepSeek"""
    system_msg = f"""Eres un experto en CTFs y pentesting. Para {nombre_maquina} ({ip}), genera:
1. *Reconocimiento*: Comandos de escaneo (nmap, masscan)
2. *Enumeraci√≥n*: T√©cnicas espec√≠ficas por servicio
3. *Explotaci√≥n*: 3 m√©todos con payloads actualizados
4. *Post-Explotaci√≥n*: Comandos de pivoting
5. *Escalada*: 2 v√≠as de escalada (kernel/sudo)
6. *Hardening*: Recomendaciones de seguridad

Formato: Markdown con tabs de c√≥digo ejecutables"""
    
    with Progress() as progress:
        task = progress.add_task("[cyan]Generando write-up...", total=100)
        while not progress.finished:
            progress.update(task, advance=10)
            response = client.chat.completions.create(
                model="deepseek-reasoner",
                messages=[{
                    "role": "system", "content": system_msg},
                    {"role": "user", "content": f"Genera write-up para {nombre_maquina}"}
                ],
                temperature=0.3,
                max_tokens=3000
            )
            progress.update(task, completed=100)
    
    return response.choices[0].message.content

def analizar_puerto(ip, puerto):
    """An√°lisis avanzado de un puerto espec√≠fico"""
    with console.status("[bold green]Analizando puerto...[/bold green]") as status:
        response = client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[{
                "role": "user", 
                "content": f"Analiza {ip}:{puerto} y lista 5 CVE recientes con PoCs"
            }]
        )
        return response.choices[0].message.content

def modo_automatico(ip):
    """Genera un script Bash autom√°tico"""
    with console.status("[bold yellow]Generando script autom√°tico...[/bold yellow]") as status:
        response = client.chat.completions.create(
            model="deepseek-reasoner",
            messages=[{
                "role": "user",
                "content": f"Genera script Bash autom√°tico para {ip} con: escaneo, explotaci√≥n y post-explotaci√≥n"
            }]
        )
        return response.choices[0].message.content

def exportar_writeup(writeup, nombre_maquina):
    """Exporta el write-up en el formato y ruta especificados"""
    console.print("\nüì§ [bold]Opciones de exportaci√≥n:[/bold]")
    console.print("1. Markdown (.md)")
    console.print("2. Texto plano (.txt)")
    console.print("3. HTML (.html)")
    formato = console.input("‚ö° Selecciona el formato (1-3): ").strip()
    
    if formato == "1":
        extension = ".md"
    elif formato == "2":
        extension = ".txt"
    elif formato == "3":
        extension = ".html"
    else:
        console.print("[bold red]‚ùå Formato no v√°lido. Usando Markdown por defecto.[/bold red]")
        extension = ".md"
    
    ruta = console.input(f"üìÇ Ruta para guardar el archivo (deja vac√≠o para ./{nombre_maquina}_writeup{extension}): ").strip()
    if not ruta:
        ruta = f"./{nombre_maquina}_writeup{extension}"
    
    try:
        with open(ruta, "w") as f:
            if formato == "3":  # HTML
                f.write(f"<h1>Write-up de {nombre_maquina}</h1>\n<pre>{writeup}</pre>")
            else:
                f.write(f"# Write-up de {nombre_maquina}\n\n{writeup}")
        console.print(f"‚úÖ [bold green]Write-up guardado en {ruta}[/bold green]")
    except Exception as e:
        console.print(f"[bold red]‚ùå Error al guardar el archivo: {e}[/bold red]")

def mostrar_menu():
    console.print("\n" + "="*50, style="bold blue")
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("Opci√≥n", style="cyan")
    table.add_column("Descripci√≥n", style="green")
    table.add_row("1", "üßô‚Äç‚ôÇÔ∏è Generar write-up completo")
    table.add_row("2", "üîç Analizar puerto espec√≠fico")
    table.add_row("3", "ü§ñ Modo Autom√°tico (Autopwn)")
    table.add_row("4", "üì§ Exportar write-up")
    table.add_row("5", "‚ùå Salir")
    console.print(table)

def main():
    verificar_dependencias()  # Verifica e instala dependencias antes de continuar
    console.print(Panel.fit(BANNER, style="bold cyan"))
    maquina = console.input("\nüîß [bold]Nombre de la m√°quina: [/bold]").strip()
    ip = console.input("üåê [bold]Direcci√≥n IP: [/bold]").strip()
    
    while True:
        mostrar_menu()
        opcion = console.input("\n‚ö° [bold]Selecciona opci√≥n: [/bold]")
        
        if opcion == "1":
            console.print(f"\nüìú [bold]Generando write-up para {maquina}...[/bold]\n")
            writeup = generar_writeup(maquina, ip)
            console.print(Markdown(writeup))
        elif opcion == "2":
            puerto = console.input("üî¶ [bold]Puerto a analizar (ej: 445): [/bold]")
            console.print(f"\nüîé [bold]An√°lisis de {ip}:{puerto}:[/bold]\n")
            analisis = analizar_puerto(ip, puerto)
            console.print(Panel.fit(analisis, style="bold green"))
        elif opcion == "3":
            console.print(f"\nü§ñ [bold]Iniciando modo autom√°tico para {ip}...[/bold]\n")
            script = modo_automatico(ip)
            console.print(Panel.fit(script, style="bold yellow"))
        elif opcion == "4":
            writeup = generar_writeup(maquina, ip)
            exportar_writeup(writeup, maquina)
        elif opcion == "5":
            console.print("\nüßô‚Äç‚ôÇÔ∏è [bold cyan]¬°WriteWizard ha completado su magia! Saliendo...[/bold cyan]")
            break

if __name__ == "__main__":
    main()
